@page "/NewUser"
@using ApptiqueServer.Dtos
@using Newtonsoft.Json
@inject HttpClient http
@inject IConfiguration Configuration
@inject UserService userService
@inject NavigationManager navigater;



    
    

        <EditForm OnValidSubmit="Submit" Model="userModel">

            <div style="margin-left: 23%; z-index: 0">
                <br />
                <p style="color: red">@errMessage</p>
            </div>

            <div style="margin-top: 5%; margin-left: 30%">


                <form>

                    <div class="group">
                        <input id="appName" type="text" required @bind-value="@userModel.Username">
                        <span class="highlight"></span>
                        <span class="bar"></span>
                        <label class="frm-label" for="appName">Username</label>
                    </div>

                    <div class="group">
                        <input id="packageName" type="password" required @bind-value="@userModel.Password">
                        <span class="highlight"></span>
                        <span class="bar"></span>
                        <label class="frm-label" for="packageName">Password</label>
                    </div>

                </form>



            </div>

            <div style="margin-left: 39%; margin-top: 9%">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create User</MudButton>
            </div>

            @if (success == true)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }


            <div class="overlay-app"></div>

        </EditForm>


@if (submit)
{

    errMessage = string.Empty;
    <MudProgressLinear Color="Color.Success" Indeterminate="true" Class="my-7" />


}




@code {
    IBrowserFile apk;
    bool submit = false;
    UserModel userModel = new UserModel();

    private bool checkValue;
    private string errMessage;
    private bool success;


    protected override async Task OnInitializedAsync()
    {
        
    }

    async Task Submit()
    {
        string DomainURL = Configuration["HostDomain:DomainURL"];



        var existingUser = userService.GetUsersByUsername(userModel.Username);

        


        if (!string.IsNullOrWhiteSpace(userModel.Username) || !string.IsNullOrWhiteSpace(userModel.Password))
        {
            success = true;
            var result = await http.PostAsJsonAsync($"https://{DomainURL}/api/app/register", userModel);

            if (!result.IsSuccessStatusCode)
            {
                var error = await result.Content.ReadFromJsonAsync<ErrorResponse>();
                errMessage = error.Message;
                success = false;
                
            }
            else
            {
                success = false;
                navigater.NavigateTo("/", true);
            }

            
        }
        else
        {
            errMessage = "Please fill in all fields";
            success = false;
            errMessage = "Please fill in all fields";
        }

        
    }

    class ErrorResponse
    {
        public string Message { get; set; }
    }

}
