@page "/AppRevisions/{AppID}"
@inject IAppService appService;
@inject IJSRuntime JsRuntime;
@inject NavigationManager navigater;
<h3>AppRevisions</h3>
<MudButton @onclick="@(()=>navigater.NavigateTo("NewRevision/"+ app.ID))" Variant="Variant.Filled" Color="Color.Primary">Create New Release</MudButton>
<MudDataGrid Items="app.Revisions">
    <Columns>
        <PropertyColumn Property="x => x.ID" Title="ID" />
        <PropertyColumn Property="x => x.AppVersion" />
        <PropertyColumn Property="x => x.AppVersionName" />
        <PropertyColumn Property="x => x.ApkPath" />
        <PropertyColumn Property="x => x.ReleaseDate" />
        <TemplateColumn StickyRight="true">
            <CellTemplate>

                <MudIconButton OnClick="@(()=>Delete(context.Item))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />

            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {


    private AppModel app;
    [Parameter]
    public string AppID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        app = await appService.GetAppByID(AppID);
        app.Revisions.Reverse();
    }

    async Task Delete(AppRevisionsModel revision)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await appService.RemoveAPKPhysically(revision.ApkPath);
            app.Revisions.Remove(revision);
            await appService.UpdateApp(app);
        }
    }
}
