@inject IPackageService packageService;
@inject AppService appService;
@page "/"
@inject IStateChangedService changedService;
@inject ISnackbar Snackbar


<RefreshView OnRefresh="@HandleRefresh">


    <MudCard>
        <MudCardContent>
            <MudItem xs="12" sm="6" md="4">
                <MudAutocomplete T="string" Label="Search" @bind-Value="value2" SearchFunc="@Search2"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"/>
            </MudItem>
            <br/>
        </MudCardContent>
    </MudCard>

    <br/>
    <br/>
    <br/>

    @{
        var filteredApps = apps.Where(a => string.IsNullOrEmpty(value2) || a.App.AppName.Contains(value2, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }
    <Virtualize Items="filteredApps" Context="item">
        <ApptiqueClient.Components.AppComponent App="@item" AppStateChanged="AppStateChanged"/>
        <br/>
    </Virtualize>
</RefreshView>

<style>

    body { background-color: #3B403B; }

 

</style>


@code {

    readonly List<AppsOverviewViewModel> apps = new();
    public string[] AppNameArray { get; set; }


    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value2;
    private bool isRefreshing;


    protected override async Task OnInitializedAsync()
    {
        changedService.UpdateUI += UpdateUI;
        changedService.Register();

        ;

        if (await Permissions.CheckStatusAsync<Permissions.StorageWrite>() != PermissionStatus.Granted)
        {
            await Permissions.RequestAsync<Permissions.StorageWrite>();
            await Permissions.RequestAsync<Permissions.StorageRead>();
        }


        await GetPackages();

        GetAppName();
    }

    private async Task HandleRefresh()
    {
        isRefreshing = true;
        await GetPackages();
        Snackbar.Add("Page refreshed!");
        await Task.Delay(2000);
        isRefreshing = false;
    }


    private async Task<IEnumerable<string>> Search2(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
        {
            return Array.Empty<string>();
        }

        return AppNameArray.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    async Task GetPackages()
    {
        apps.Clear();
        var appsFromServer = await appService.GetAppInformationsFromServer();
        appsFromServer.ForEach(x => apps.Add(new AppsOverviewViewModel { App = x }));
        var packages = packageService.GetAllPackages();
        foreach (var item in packages)
        {
            var appMatch = apps.FirstOrDefault(x => x.App.PackageName == item.PackageName);
            if (appMatch != null)
            {
                appMatch.InstalledVersion = item.VersionCode;
            }
        }
        var t = apps.Count;
    }

    async Task AppStateChanged(bool b)
    {
        await GetPackages();
    }

    void GetAppName()
    {
        var names = new List<string>();

        foreach (var items in apps)
        {
            names.Add($"{items.App.AppName}");
        }

        AppNameArray = names.ToArray();
    }

    void UpdateUI(object sender, EventArgs eventArgs)
    {
        MainThread.BeginInvokeOnMainThread(async () =>
        {
            apps.Clear();
            StateHasChanged();
            await GetPackages();
            StateHasChanged();
        });
    }



}