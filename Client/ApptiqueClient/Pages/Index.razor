@inject IPackageService packageService;
@inject AppService appService;
@page "/"
@inject IStateChangedService changedService;

@foreach (var item in apps)
{
    <ApptiqueClient.Components.AppComponent App="item" AppStateChanged="AppStateChanged" />
    <br />
}


@code {
    List<AppsOverviewViewModel> apps = new List<AppsOverviewViewModel>();

    protected override async Task OnInitializedAsync()
    {
        changedService.UpdateUI += UpdateUI;
        changedService.Register();

        if (await Permissions.CheckStatusAsync<Permissions.StorageWrite>() != PermissionStatus.Granted)
        {
            await Permissions.RequestAsync<Permissions.StorageWrite>();
            await Permissions.RequestAsync<Permissions.StorageRead>();
        }
        await GetPackages();
    }



    async Task GetPackages()
    {
        apps.Clear();
        var appsFromServer = await appService.GetAppInformationsFromServer();
        appsFromServer.ForEach(x => apps.Add(new AppsOverviewViewModel() { App = x }));
        var packages = packageService.GetAllPackages();
        foreach (var item in packages)
        {
            var appMatch = apps.FirstOrDefault(x => x.App.PackageName == item.PackageName);
            if (appMatch != null)
            {
                appMatch.InstalledVersion = item.VersionCode;
            }
        }
        int t = apps.Count;
    }

    async Task AppStateChanged(bool b)
    {
        await GetPackages();
    }

    void UpdateUI(object sender, EventArgs eventArgs)
    {
        MainThread.BeginInvokeOnMainThread(async () =>
        {
            apps.Clear();
            StateHasChanged();
            await GetPackages();
            StateHasChanged();
        });
    }


}